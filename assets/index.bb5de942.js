import{p as n,a as s,o as a,c as t,b as e,w as o,r as p,d as c,t as l,F as u,e as i,f as r,g as k,h as d,i as m}from"./vendor.b1288884.js";!function(n=".",s="__import__"){try{self[s]=new Function("u","return import(u)")}catch(a){const t=new URL(n,location),e=n=>{URL.revokeObjectURL(n.src),n.remove()};self[s]=n=>new Promise(((a,o)=>{const p=new URL(n,t);if(self[s].moduleMap[p])return a(self[s].moduleMap[p]);const c=new Blob([`import * as m from '${p}';`,`${s}.moduleMap['${p}']=m;`],{type:"text/javascript"}),l=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(c),onerror(){o(new Error(`Failed to import: ${n}`)),e(l)},onload(){a(self[s].moduleMap[p]),e(l)}});document.head.appendChild(l)})),self[s].moduleMap={}}}("/assets/");const g={methods:{onLucky(){console.log("TODO: popup a question")}}},h=o();n("data-v-f10c9c02");const f={class:"home"},b={class:"content"},y=e("div",{class:"logo"},[e("img",{src:"/logo.png",alt:""}),e("div",{class:"name"},"Interview 101")],-1),q={class:"buttons"},w=e("a",{class:"button",href:"#/categories"},"See All Questions",-1);s();const v=h(((n,s,o,p,c,l)=>(a(),t("div",f,[e("div",b,[y,e("div",q,[w,e("a",{class:"button lucky",onClick:s[1]||(s[1]=(...n)=>l.onLucky&&l.onLucky(...n))},"I'm Feeling Lucky")])])]))));g.render=v,g.__scopeId="data-v-f10c9c02";const S={props:{selected:{type:Boolean,default:!1},opened:{type:Boolean,default:!1},page:{type:Object,default:()=>({})}},data(){return{categories:this.page.categories||[]}},methods:{onOpen(){this.$emit("open")}}},_={class:"category"},T={class:"category__body is-opened"};S.render=function(n,s,o,k,d,m){const g=p("router-link");return a(),t("div",_,[e("div",{onClick:s[1]||(s[1]=(...n)=>m.onOpen&&m.onOpen(...n)),class:"category__title"},[c(l(o.page.name)+" ",1),e("i",{class:["iconfont","icon-"+o.page.icon],style:{"font-weight":"normal","font-size":"14px","margin-left":"5px"}},null,2)]),e("div",T,[(a(!0),t(u,null,i(d.categories,((n,s)=>(a(),t(g,{class:"category__link",to:"/questions/"+o.page.id+"/"+n.id},{default:r((()=>[c(l(n.name)+"（"+l(n.questions?n.questions.length:0)+"） ",1)])),_:2},1032,["to"])))),256))])])};var C=[{name:"通用知识",icon:"align-right",categories:[{name:"设计模式",file:"common/design-pattern.md",id:"5bb84214",questions:[{question:"发布订阅模式 和 观察者模式 有什么关系？",question_body:"",answer:'<p>发布订阅模式属于广义上的观察者模式，是其最常见的一种实现</p>\n<p>发布订阅模式会比「典型的观察者模式」多一个「发布订阅中心」</p>\n<p><strong>典型观察者模式</strong></p>\n<pre class="language-unknown"><code>+-----------+  Fire Event  +------------+\n|           |-------------&gt;|            |\n|  Subject  |              |  Observer  |\n|           |&lt;-------------|            |\n+-----------+   Subscribe  +------------+</code></pre><p><strong>发布订阅模式</strong></p>\n<pre class="language-unknown"><code>+-----------+               +---------------+  Fire Event  +------------+\n|           | Publish Event |               |-------------&gt;|            |\n| Publisher |--------------&gt;| Event Channel |              | Subscriber |\n|           |               |               |&lt;-------------|            |\n+-----------+               +---------------+   Subscribe  +------------+</code></pre><blockquote>\n<p>参考 <a href="https://www.zhihu.com/question/23486749">https://www.zhihu.com/question/23486749</a></p>\n</blockquote>\n'},{question:"用代码实现发布订阅模式",question_body:"",answer:"<p>emmm...todo</p>\n"}]},{name:"网络",file:"common/network.md",id:"810a0276",questions:[{question:"301 和 302",question_body:"",answer:"<ul>\n<li>301 永久重定向，资源永久转移，比如更换了域名</li>\n<li>302 临时重定向，比如登录后的临时跳转</li>\n</ul>\n"},{question:"401 和 403",question_body:"",answer:"<ul>\n<li>401 Unauthorized 表示未登录认证（潜台词：希望客户端携带凭证再次访问）</li>\n<li>403 Forbidden 没有权限，拒绝执行（潜台词：就是没有权限，不是技术上能解决的，不要再请求该资源）</li>\n</ul>\n"},{question:"使用 301 强制 https 存在什么问题？有更好的方案吗",question_body:"",answer:"<p>使用 301 重定向，第一次请求仍然是 http 的，仍然存在被攻击的风险</p>\n"},{question:"TCP 和 UDP 的区别",question_body:"",answer:"<ul>\n<li>TCP 面向字节流</li>\n<li>UDP 面向报文</li>\n</ul>\n"},{question:"TCP 协议中的序列号有什么用",question_body:"",answer:"<p>丢失重发 &amp; 去重 &amp; 排序</p>\n"},{question:"TCP 粘包问题",question_body:"",answer:""},{question:"TCP 建立连接 为什么是三次握手？",question_body:"",answer:"<p><strong>三次是建立相对可靠连接的最小次数，两次不够，四次多余</strong>。其实无论多少次握手，信道都<strong>不是完全可靠</strong>的（参考两军问题），三次握手只是保证了信道最基本的<strong>&quot;可用性&quot;，双方能收能发</strong></p>\n<p>建连过程将最终的控制权交给了发送方，原因在于网络是分布式的，没有绑定一个全局时钟来生成序列号，所以只有发送方才知道某个 序列号 是否过期，需要由发送方来验证，再通过 ACK 确认建立连接或者 RST 中止连接</p>\n"},{question:"TCP 建立连接时，三次握手做了什么事情",question_body:"",answer:'<ol>\n<li>确认了<strong>双方能收能发</strong>，信道相对可靠</li>\n<li><strong>交换</strong>了彼此的<strong>初始序列号</strong> ISN</li>\n</ol>\n<pre class="language-unknown"><code>TCP A                                                TCP B\n\n1.  CLOSED                                               LISTEN\n\n2.  SYN-SENT    --&gt; &lt;SEQ=100&gt;&lt;CTL=SYN&gt;               --&gt; SYN-RECEIVED\n\n3.  ESTABLISHED &lt;-- &lt;SEQ=300&gt;&lt;ACK=101&gt;&lt;CTL=SYN,ACK&gt;  &lt;-- SYN-RECEIVED\n\n4.  ESTABLISHED --&gt; &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt;       --&gt; ESTABLISHED\n\n5.  ESTABLISHED --&gt; &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt;&lt;DATA&gt; --&gt; ESTABLISHED\n\n      Basic 3-Way Handshake for Connection Synchronization</code></pre><blockquote>\n<p>示意图来自：\n<a href="https://tools.ietf.org/html/rfc793#section-3.4">RFC 793 - TCP</a></p>\n</blockquote>\n'},{question:"TCP 建立连接，如果使用两次握手，会有什么问题？",question_body:"",answer:"<ol>\n<li>首先两次握手，<strong>只能保证 Sender -&gt; Receiver 的单向传输可用</strong>，Receiver -&gt; Sender 方向传输可靠性仍是未知的</li>\n<li>其次，网络是不稳定的，<strong>SYN 传输可能存在延迟和超时重发</strong>，如果没有来自 Sender 的确认，可能会导致 Receiver 创建不必要的连接，造成资源浪费</li>\n</ol>\n"},{question:"TCP 和两军问题",question_body:"",answer:"<p>关于两军问题，可以网上搜一下。这个问题的直接原因在于，最后一次派遣 通信兵 的军队，都无法确认消息是否送达</p>\n"},{question:"TCP 释放连接，为什么是四次挥手？为什么比建立连接的三次，多了一次",question_body:"",answer:'<p>简言之，建立连接其实也可以是四次，只不过第二次和第三次可以合并，最终变成了三次。\n而在挥手过程中，第二次和第三次无法合并，因为 Receiver 端存在一个半关闭状态，此时先回复了 ACK ，直到 Receiver 数据发送完毕，才会发送 FIN</p>\n<p>看下过程</p>\n<ul>\n<li>step1:\nSender向Receiver发出 FIN+SEQ 标记，表示Sender要主动关闭连接，停止发送数据</li>\n<li>step2:\nReceiver发出 ACK + SEQ 标记，发出确认回复，此时，Receiver进入<strong>半关闭状态</strong>（Sender已经没有数据发出了，但Receiver若发出数据，Sender要接收）<strong>因为此时Receiver的数据不一定完全发送完了</strong></li>\n<li>step3:\nReceiver最后的数据发送完了，就向Sender发送 FIN+ACK 连接释放, 服务器此时进入了等待Sender最后确认的状态</li>\n<li>step4:\nSender收到Receiver连接释放后，发出 ACK + SEQ 表示确认，服务器收到了Sender发出的确认后就立即进入了closed状态</li>\n</ul>\n<p>所以可以看出，挥手多的一个步骤是在 step3, ACK 和 FIN 在 Receiver 分成了 2 步发出，如果 Receiver 再收到 Sender 发来的 FIN 后，如果没有数据传输了，那么 FIN+ACK 是可以合并的</p>\n<blockquote>\n<p>参考资料：</p>\n<ol>\n<li><a href="https://blog.csdn.net/qzcsu/article/details/72861891">TCP的三次握手与四次挥手</a></li>\n<li><a href="https://www.amazon.cn/dp/B00JTQK1L4">《图解http》</a></li>\n<li><a href="https://www.youtube.com/watch?v=GP7uvI_6uas&amp;t=1s">cs50-tcp</a></li>\n<li><a href="https://www.youtube.com/watch?v=4axL8Gfw2nI">cs50-http</a></li>\n<li><a href="https://www.zhihu.com/question/24853633">TCP 为什么是三次握手，而不是两次或四次？</a></li>\n<li><a href="https://draveness.me/whys-the-design-tcp-three-way-handshake/">为什么 TCP 建立连接需要三次握手</a></li>\n</ol>\n</blockquote>\n'},{question:"介绍下 HTTP/2 的一些新特性",question_body:"",answer:'<ul>\n<li>二进制分帧（HTTP/1.1 中，头信息是文本格式，数据体可以是文本，也可以是二进制，而到了 HTTP/2，头信息和数据体都采用了二进制格式，统称为帧：头信息帧和数据帧）</li>\n<li>多路复用</li>\n<li>header 压缩</li>\n<li>服务器推送</li>\n<li>...</li>\n</ul>\n<blockquote>\n<p>参考</p>\n<ol>\n<li><a href="https://zhuanlan.zhihu.com/p/43787334">HTTP/1.0、HTTP/1.1、HTTP/2、HTTPS</a></li>\n<li><a href="https://developers.google.com/web/fundamentals/performance/http2">Introduction to HTTP/2</a></li>\n</ol>\n</blockquote>\n'},{question:"介绍下 HTTP/2 的头部压缩技术",question_body:"",answer:'<p>在 HTTP/1 中，一般只有消息主体会经过压缩（ 比如 gzip ），但是状态行和头部没有经过任何压缩\nHTTP/2 针对每个 TCP 连接，会在客户端和服务端维护一份静态字典、动态字典，加上哈弗曼编码，来对头部进行压缩，这种压缩格式简称 HPACK</p>\n<blockquote>\n<p>参考资料：</p>\n<ol>\n<li><a href="https://imququ.com/post/header-compression-in-http2.html">HTTP/2 头部压缩技术介绍</a></li>\n<li><a href="https://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12">HPACK - Header Compression for HTTP/2 draft-ietf-httpbis-header-compression-12</a></li>\n</ol>\n</blockquote>\n'},{question:"介绍下 HTTP/2 多路复用？",question_body:"",answer:"<p>同一个域名下，多个请求可以复用同一个 TCP 连接</p>\n"},{question:"为什么 HTTP/1.x 无法多路复用，而 HTTP/2 可以？",question_body:"",answer:'<p>因为 HTTP/1.x 交付模型保证每个连接每次只交付一个响应（响应排队），而在 HTTP/2 引入了二进制分帧机制后，突破了这个限制，不再依赖并发 TCP 连接来提升性能，每个数据流都可以拆成帧，并且这些帧可以交错发送，并在另一端重组</p>\n<blockquote>\n<p>参考：</p>\n<ol>\n<li><a href="https://developers.google.com/web/fundamentals/performance/http2#request_and_response_multiplexing">Request and response multiplexing</a></li>\n</ol>\n</blockquote>\n'},{question:"HTTP/2 哪些情况会复用连接",question_body:"",answer:"<ol>\n<li>同一个域名下的资源</li>\n<li>不同域名下的资源，需满足两个条件：域名解析到同一个 IP、使用同一个证书</li>\n</ol>\n"},{question:"介绍下 HTTP/2 服务器推送（Server Push）",question_body:"",answer:'<p>服务器发送 HTML 后，需要等待浏览器解析 HTML 后发起内嵌资源的请求，才会响应 JavaScript、CSS、images 等资源，Server Push 允许服务器提前推送这些资源到浏览器(浏览器可以选择拒绝，比如已有缓存的情况)，消除了中间的等待时间</p>\n<blockquote>\n<p>参考 <a href="https://http2.github.io/faq/">HTTP/2 FAQ</a></p>\n</blockquote>\n'},{question:"什么是队首阻塞",question_body:"",answer:'<blockquote>\n<p>参考 <a href="https://zhuanlan.zhihu.com/p/330300133">关于队头阻塞（Head-of-Line blocking），看这一篇就足够了</a></p>\n</blockquote>\n'}]},{name:"算法",file:"common/algorithm.md",id:"41a96538",questions:[{question:"翻转链表",question_body:"",answer:'<p>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5\n变为\n5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1</p>\n<p>思路：弄两个指针，分别指向相邻两个，同时后移</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reverseList</span><span class="token punctuation">(</span> <span class="token parameter">head</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> pre <span class="token operator">=</span> head\n  <span class="token keyword">let</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next\n\n  <span class="token keyword">while</span><span class="token punctuation">(</span> next <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    next<span class="token punctuation">.</span>next <span class="token operator">=</span> pre\n    pre <span class="token operator">=</span> next\n    next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> pre\n<span class="token punctuation">}</span></code></pre>\n'},{question:"多个数组求交集",question_body:"",answer:'<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">intersection</span><span class="token punctuation">(</span> <span class="token parameter">first<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> <span class="token parameter">item</span> <span class="token operator">=></span> rest<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span> item <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n'},{question:"多个数组求并集",question_body:"",answer:'<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">union</span><span class="token punctuation">(</span> <span class="token parameter"><span class="token operator">...</span>arrays</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arrays<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token parameter">memo<span class="token punctuation">,</span> array</span> <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>memo<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        memo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> memo\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n'}]},{name:"综合",file:"common/other.md",id:"93aecbba",questions:[{question:"从输入 URL 到页面加载完成，发生了什么？",question_body:"",answer:"<ol>\n<li>DNS 查询</li>\n<li>建立 TCP 连接</li>\n<li>...</li>\n</ol>\n"},{question:"前端监控方案",question_body:"",answer:"<p>可以分为两大类监控指标</p>\n<p><strong>稳定性指标 &amp; 性能指标</strong></p>\n<ol>\n<li>稳定性指标：<ul>\n<li>JS 异常</li>\n<li>API 异常</li>\n<li>资源异常（比如 404）</li>\n<li>白屏率</li>\n<li>...</li>\n</ul>\n</li>\n<li>性能指标：<ul>\n<li>白屏时间</li>\n<li>LCP/FID/CLS</li>\n<li>秒开率...</li>\n</ul>\n</li>\n</ol>\n<p>以及平台本身的告警能力，支持环比时间、阈值、告警渠道（邮件、短信、电话...）配置</p>\n"},{question:"如何做前端的错误监控",question_body:"",answer:"<p>onerror\nunhandledrejection</p>\n"},{question:"前端错误监控上报量过大，如何解决",question_body:"",answer:"<ul>\n<li>添加采样率: random(0,1) &lt; 0.x 才上报</li>\n<li>配置 errorFilter</li>\n<li>本地暂存，去重后批量上报</li>\n</ul>\n"},{question:"前端监控遇到 Script Error 如何解决",question_body:"",answer:"<ol>\n<li>script 脚本添加 crossorigin=&quot;anonymous&quot; 属性</li>\n<li>服务端添加允许跨域头 Access-Control-Allow-Origin: *</li>\n</ol>\n"},{question:"为什么一般打点上报使用 new Image 方式",question_body:"",answer:'<ol>\n<li>一般打点域名都是独立域名，new Image 不存在跨域</li>\n<li>new Image 不像 script，需要插入到 DOM 中才会发送请求，不会引发频繁操作 DOM 带来的性能问题</li>\n</ol>\n<blockquote>\n<p>参考：</p>\n<ol>\n<li><a href="https://mp.weixin.qq.com/s/v6R2w26qZkEilXY0mPUBCw">为什么前端监控要用GIF打点</a></li>\n</ol>\n</blockquote>\n'},{question:"如何在页面关闭前发送打点请求",question_body:"",answer:'<ol>\n<li>同步 xhr</li>\n<li>navigator.sendBeacon</li>\n</ol>\n<blockquote>\n<p>参考：</p>\n<ol>\n<li><a href="https://zhuanlan.zhihu.com/p/68838820">如何在 Web 关闭页面时发送 Ajax 请求</a></li>\n</ol>\n</blockquote>\n'}]}],id:"703bbe45"},{name:"前端基础",icon:"code",categories:[{name:"JavaScript 基础",file:"junior/javascript.md",id:"3f8bf3c8",questions:[{question:"JavaScript 中有哪些数据类型",question_body:"",answer:"<p>7 大基本类型 和 Object</p>\n"},{question:"JavaScript中的基本类型",question_body:"",answer:"<ul>\n<li>null</li>\n<li>undefined</li>\n<li>boolean</li>\n<li>number</li>\n<li>bigint</li>\n<li>string</li>\n<li>symbol</li>\n</ul>\n\x3c!--\n参考：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\n--\x3e\n\n"},{question:"如何区分 JavaScript 中的几种数据类型",question_body:"",answer:'<p><code>typeof</code> 可以区分除了 <code>null</code> 以外的其他基本类型</p>\n<p>想要区分所有类型可以使用</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n<ul>\n<li>null -&gt; [object Null]</li>\n<li>undefined -&gt; [object Undefined]</li>\n<li>number -&gt; [object Number]</li>\n<li>bigint -&gt; [object BigInt]</li>\n<li>string -&gt; [object String]</li>\n<li>boolean -&gt; [object Boolean]</li>\n<li>symbol -&gt; [object Symbol]</li>\n<li>object -&gt; [object Object] | [object Array] | [object RegExp] | [object Date]...</li>\n</ul>\n'},{question:"0.1 + 0.2 !== 0.3",question_body:"",answer:'<ul>\n<li><p>问题描述：JS 中的浮点数运算精度丢失问题</p>\n</li>\n<li><p>原因：存储空间是有限的，一些十进制小数无法使用二进制精确表示，就像十进制中的 1/3</p>\n</li>\n<li><p>解决方案：</p>\n<ol>\n<li>小数运算转为整数运算 ( 0.1 * 10 + 0.2 * 10 ) / 10 === 0.3</li>\n<li>判断相等：Math.abs( 0.1 + 0.2 - 0.3 ) &lt; Number.EPSILON</li>\n<li>BigDecimal（提案中，此时是 2021.4 月）</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>参考：</p>\n<ol>\n<li><a href="https://github.com/camsong/blog/issues/9">JavaScript 浮点数陷阱及解法\n</a></li>\n<li><a href="https://zhuanlan.zhihu.com/p/225490777">JavaScript著名面试题: 0.1 + 0.2 !== 0.3，即将成为过去</a></li>\n<li><a href="https://zhuanlan.zhihu.com/p/95318421">详解js中0.1+0.2!=0.3</a></li>\n</ol>\n</blockquote>\n'},{question:"JavaScript 是如何做隐式类型转换的",question_body:"",answer:'<h2>原始类型转换的规则</h2>\n<p>原始类型转换大致可以分为下面3类和2条特殊规则</p>\n<ol>\n<li><p>to string</p>\n<p>隐式转换发生在用一个字符串进行+操作的二元运算</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token number">123</span> <span class="token operator">+</span> <span class="token string">\'\'</span>    <span class="token comment">// implicit</span></code></pre>\n</li>\n<li><p>to boolean</p>\n<p>隐式转换发生在使用了（ || &amp;&amp; ！）进行逻辑运算时</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>      <span class="token comment">// implicit due to logical context</span>\n<span class="token operator">!</span><span class="token operator">!</span><span class="token number">2</span>                 <span class="token comment">// implicit due to logical operator</span>\n<span class="token number">2</span> <span class="token operator">||</span> <span class="token string">\'hello\'</span>        <span class="token comment">// implicit due to logical operator</span></code></pre>\n<p>除了下面列出的值为false, 其余的都为true</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>         <span class="token comment">// false</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment">// false</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment">// false</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>        <span class="token comment">// false</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>       <span class="token comment">// false</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token comment">// false</span></code></pre>\n<p>所以除了它以外的都是true</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>             <span class="token comment">// true</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token comment">// true</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// true</span>\n<span class="token operator">!</span><span class="token operator">!</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// true</span>\n<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></code></pre>\n</li>\n<li><p>to number</p>\n<p>进行 to number 的隐式转换比较多，下面列一下可能会发生的情况：</p>\n<ul>\n<li>比较运算 (&gt;, &lt;, &lt;=, &gt;=)</li>\n<li>按位运算 (|, &amp;, ^, ~)</li>\n<li>算术运算（- + * / %）</li>\n<li>== 和 !=</li>\n<li>一元运算 +</li>\n</ul>\n<p>注意当 == 的左右都是字符串时，不会进行to number的隐式转换</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>              <span class="token comment">// NaN</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// NaN</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>                   <span class="token comment">// 0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                   <span class="token comment">// 1</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">" 12 "</span><span class="token punctuation">)</span>                 <span class="token comment">// 12</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"-12.34"</span><span class="token punctuation">)</span>               <span class="token comment">// -12.34</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"\\n"</span><span class="token punctuation">)</span>                   <span class="token comment">// 0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">" 12s "</span><span class="token punctuation">)</span>                <span class="token comment">// NaN</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>                    <span class="token comment">// 123</span></code></pre>\n</li>\n<li><p>当用 == 和 <code>null</code> 或者 <code>undeinfed</code> 进行运算时，是不会发生numeric 转换的。 <code>null</code>只==<code>null</code>或者<code>undefined</code>!</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span>               <span class="token comment">// false</span>\n<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">null</span>            <span class="token comment">// true</span>\n<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">undefined</span>  <span class="token comment">// true</span>\n<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span>       <span class="token comment">// true</span></code></pre>\n</li>\n<li><p>NaN 和谁都不相等，包括它自己!</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span>              <span class="token comment">// false</span></code></pre>\n</li>\n</ol>\n<p>根据上面的规则，测试一下:</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token string">\'true\'</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token comment">// false 因为Number(\'true\')是 NaN; Number(true) 是1</span>\n\n<span class="token comment">// 某面试题</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Boolean([]) = true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Number([]) = 0 所以为true</span></code></pre>\n<h2>对象的类型转换</h2>\n<p>对象的类型转换分为下面四步</p>\n<ol>\n<li>如果已经是原始类型，直接返回</li>\n<li>调用 <code>input.toString()</code> 方法，如果是原始类型, 返回</li>\n<li>调用 <code>input.valueOf()</code>, 如果是原始类型, 返回</li>\n<li>如果调用 <code>input.toString()</code> 和 <code>input.valueOf()</code> 返回都不是原始类型，抛出类型错误</li>\n</ol>\n<p>举个例子：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token keyword">null</span>\n<span class="token comment">// [1].toString() = \'1\'</span>\n<span class="token comment">// \'1\' > null</span>\n<span class="token comment">// 原始类型比较进入Number(\'1\') > Number(null)</span>\n<span class="token comment">// 1 > 0</span>\n<span class="token comment">// 所以为true</span>\n\n<span class="token comment">// 再看一个面试题</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// {}.toString() "[object Object]"; 返回类型字符串</span>\n<span class="token comment">// Number("[object Object]") NaN</span>\n<span class="token comment">// Number(false) 0</span>\n<span class="token comment">// 所以为false</span></code></pre>\n'},{question:"=== 和 == 有什么区别，什么时候使用 ==？",question_body:"",answer:'<ul>\n<li>== 会做隐式的类型转换，转换过后再进行比较</li>\n<li>=== 不会做类型转换，如果类型不同，会直接返回 false</li>\n</ul>\n<p class="danger">\n  大多数时候应该杜绝使用 ==，这会让你的代码意图不清晰\n</p>\n\n\x3c!--\n参考:\n1.JavaScript type coercion explained\nhttps://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839\n2. 文章1的作者推荐了书\nhttps://legacy.gitbook.com/book/oshotokill/understandinges6-simplified-chinese/details\n--\x3e\n\n'},{question:"获取函数的形参个数",question_body:"",answer:'<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span> <span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nfn<span class="token punctuation">.</span>length <span class="token comment">// -> 3</span></code></pre>\n'},{question:"Promise.all、Promise.race、Promise.allSettled",question_body:"",answer:""},{question:"描述下 JavaScript 中的垃圾回收机制",question_body:"",answer:""}]},{name:"CSS 基础",file:"junior/css.md",id:"838e3d5c",questions:[{question:"css 选择器有哪些？",question_body:"",answer:"<ul>\n<li>简单选择器<ul>\n<li>类型选择器（标签）</li>\n<li>class 选择器</li>\n<li>id 选择器</li>\n<li>通用选择器(*)</li>\n<li>属性选择器</li>\n</ul>\n</li>\n<li>伪类选择器</li>\n<li>伪元素选择器</li>\n<li>组合<ul>\n<li><code>+</code></li>\n<li><code>~</code></li>\n<li><code>&gt;</code></li>\n<li>(space)</li>\n</ul>\n</li>\n</ul>\n"},{question:"如何隐藏一个元素",question_body:"",answer:"<ol>\n<li>display: none;</li>\n<li>visibility: hidden;</li>\n<li>opacity: 0;</li>\n</ol>\n"},{question:"class 或 id 大小写敏感么？",question_body:"",answer:'<p><a href="https://www.w3.org/TR/selectors-4/#case-sensitive">选择器本身是大小写不敏感的</a>，class和id是否大小写敏感，<a href="https://www.w3.org/TR/html50/disabled-elements.html#case-sensitivity">取决于宿主语言</a></p>\n<blockquote>\n<p>The Selectors specification leaves the case-sensitivity of IDs, classes, element names, attribute names, and attribute values to be defined by the host language. [SELECTORS]</p>\n</blockquote>\n<blockquote>\n<p>The unique identifier of HTML elements in documents that are in quirks mode must be treated as ASCII <code>case-insensitive</code> for the purposes of selector matching.</p>\n</blockquote>\n<blockquote>\n<p>Classes from the class attribute of HTML elements in documents that are in quirks mode must be treated as ASCII case-insensitive for the purposes of selector matching.</p>\n</blockquote>\n<blockquote>\n<p>When comparing a CSS element type selector to the names of HTML elements in HTML documents, the CSS element type selector must first be converted to ASCII lowercase. The same selector when compared to other elements must be compared according to its original case. In both cases, the comparison is case-sensitive.</p>\n</blockquote>\n<blockquote>\n<p>When comparing the name part of a CSS attribute selector to the names of namespace-less attributes on HTML elements in HTML documents, the name part of the CSS attribute selector must first be converted to ASCII lowercase. The same selector when compared to other attributes must be compared according to its original case. In both cases, the comparison is case-sensitive.</p>\n</blockquote>\n<blockquote>\n<p>Everything else (attribute values on HTML elements, IDs and classes in no-quirks mode and limited-quirks mode, and element names, attribute names, and attribute values in XML documents) must be treated as case-sensitive for the purposes of selector matching.</p>\n</blockquote>\n<p>CSS 本身是大小写不敏感的，以下写法是等价的</p>\n<pre class="language-css"><code class="language-css"><span class="token selector">.klass</span> <span class="token punctuation">{</span>\n  <span class="token property">Color</span><span class="token punctuation">:</span> RED<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.klass</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n'},{question:"css选择器的匹配过程",question_body:"",answer:"<p>自右向左</p>\n"},{question:"选择器优先级",question_body:"",answer:'<p><strong>题一</strong></p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>\n<pre class="language-css"><code class="language-css"><span class="token selector">.blue</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.red</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>最终 text 的颜色是什么？</p>\n<pre class="language-unknown"><code>red</code></pre><p>解析：css 中后面定义的样式优先级更高</p>\n<p><strong>题二</strong></p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Here is a title!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n<pre class="language-css"><code class="language-css"><span class="token selector">body h1</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">html h1</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>最终 h1 的颜色是什么？</p>\n<pre class="language-unknown"><code>purple</code></pre><p>解析：css 中权重相同的情况下，后定义的样式优先级更高；body h1 和 html h1 优先级相同，后面的覆盖前面的</p>\n<p><strong>题三</strong></p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Here is a title!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n<pre class="language-css"><code class="language-css"><span class="token selector">#parent</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">#child</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>最终 h1 的颜色是什么？</p>\n<pre class="language-unknown"><code>purple</code></pre><p>解析：继承的样式优先级不如自身定义的样式优先级高</p>\n'},{question:"如何实现一个元素水平和垂直居中",question_body:"",answer:'<ol>\n<li>定位</li>\n</ol>\n<pre class="language-css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>\n  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.child</span> <span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>\n  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>\n  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<ol start="2">\n<li>flex</li>\n</ol>\n<pre class="language-css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n'},{question:"使用 CSS 实现一个三角",question_body:"",answer:'<pre class="language-css"><code class="language-css"><span class="token selector">.triangle</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">border-top</span><span class="token punctuation">:</span> solid 0 transparent<span class="token punctuation">;</span>\n  <span class="token property">border-left</span><span class="token punctuation">:</span> solid 10px transparent<span class="token punctuation">;</span>\n  <span class="token property">border-right</span><span class="token punctuation">:</span> solid 10px transparent<span class="token punctuation">;</span>\n  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid 10px #000<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n'},{question:"如何触发 CSS 硬件加速( GPU渲染 )",question_body:"",answer:"<ol>\n<li>transform: translateZ(0);</li>\n<li>will-change: transform;</li>\n</ol>\n<p>注：滥用硬件加速也可能导致性能问题</p>\n"}]},{name:"ES6+",file:"junior/esnext.md",id:"4887efd8",questions:[{question:"let、const 的异同",question_body:"",answer:"<ol>\n<li>都是块级作用域</li>\n<li>无法变量提升，存在 TDZ</li>\n<li>let 可修改引用，const 不可以</li>\n</ol>\n"},{question:"箭头函数和普通函数有什么区别",question_body:"",answer:"<ul>\n<li>没有自己的 this，使用 call / apply / bind 时第一个参数会被忽略</li>\n<li>没有 arguments</li>\n<li>不能用作构造函数，无法 new，无 prototype</li>\n<li>不能用来定义 generator（内部不能使用yield）</li>\n</ul>\n"},{question:"描述下暂时性死区（Temporal Dead Zone）",question_body:"",answer:'<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span> <span class="token comment">// ReferenceError</span>\n  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token punctuation">}</span></code></pre>\n<p>let 没有变量提升，在声明执行前，访问使用 let 定义的变量，会导致一个 ReferenceError（const 也一样）</p>\n'},{question:"Generator 的基本用法",question_body:"",answer:"<p>yield/throw/next</p>\n"},{question:"如何取消 fetch",question_body:"",answer:'<p>使用 AbortController</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal\n\n<span class="token function">fetch</span><span class="token punctuation">(</span> url<span class="token punctuation">,</span> <span class="token punctuation">{</span> signal <span class="token punctuation">}</span> <span class="token punctuation">)</span>\n\ncontroller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n'}]},{name:"Web 存储",file:"junior/web-storage.md",id:"6eb4c1f3",questions:[{question:"cookie 有哪些属性，分别代表什么含义",question_body:"",answer:'<p>Domain：cookie 所属的域名，\nPath、Expires、Max-Age\nSecure：在已经启用 https 的情况下，标记 Secure 可以让对应的 cookie 仅通过 https 发送\nHttpOnly：标记 HttpOnly 的 cookie 只能通过网络传输，无法通过 JS 读取，避免 xss 攻击者获取 cookie 中的敏感信息</p>\n<blockquote>\n<p>servers that require a higher level of security SHOULD use the Cookie\n   and Set-Cookie headers only over a secure channel.  When using\n   cookies over a secure channel, servers SHOULD set the Secure\n   attribute (see Section 4.1.2.5) for every cookie</p>\n</blockquote>\n<blockquote>\n<p>参考：\n<a href="https://tools.ietf.org/html/rfc6265#section-8.3">HTTP State Management Mechanism</a>\n<a href="https://javascript.ruanyifeng.com/bom/cookie.html#toc4">Cookie《JavaScript 标准参考教程（alpha）》</a>\n<a href="https://blog.dareboost.com/en/2019/03/secure-cookies-secure-httponly-flags/">Secure your Cookies (Secure and HttpOnly flags)</a></p>\n</blockquote>\n'},{question:"localStorage / sessionStorage 的区别？",question_body:"",answer:"<p>使用 localStorage 存储的数据没有过期时间的设置，而存储在 sessionStorage 中的数据会在页面会话结束时被清除</p>\n"},{question:"如何定义 sessionStorage 的会话",question_body:"",answer:"<p>sessionStorage 会在页面重新加载或恢复页面时保持原来的会话，在新标签页或窗口打开一个页面时会创建一个新的会话</p>\n"},{question:"如何检测 localStorage 是否为空",question_body:"",answer:"<p>localStorage.length</p>\n"},{question:"和 Web 存储相关的事件",question_body:"",answer:'<pre class="language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">\'storage\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">e</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n  <span class="token comment">// e.key</span>\n  <span class="token comment">// e.oldValue</span>\n  <span class="token comment">// e.newValue</span>\n  <span class="token comment">// e.url</span>\n  <span class="token comment">// e.storageArea</span>\n<span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre>\n<p>触发条件：Storage对象发生变化时（创建/更新/删除），重复设置相同的键值不会触发，Storage.clear至多触发一次</p>\n<p>触发限制：在同一个页面内发生的改变不会起作用，在相同域名下的其他页面（如一个新标签页或iframe）发生的改变才会起作用</p>\n'}]},{name:"浏览器缓存",file:"junior/cache.md",id:"43351373",questions:[{question:"常见的缓存类型",question_body:"",answer:"<p>按缓存位置分：</p>\n<ul>\n<li>Service Wroker</li>\n<li>Memory Cache</li>\n<li>Disk cache</li>\n</ul>\n<p>按失效策略分：</p>\n<ul>\n<li><p>强制缓存</p>\n<p>用 Cache-Control, Expires headers 来控制，特点是如果设置了对应的缓存时间，在该时间内不会发任何请求到服务器。</p>\n</li>\n<li><p>协商缓存</p>\n<p>用 ETag, Last-Modified, If-None-Match headers 来控制，特点是会先发一个请求给服务器验证缓存是否有效。</p>\n</li>\n</ul>\n"},{question:"缓存查找的顺序",question_body:"",answer:"<p>自上而下，找到则返回，否则继续</p>\n<ol>\n<li>Service Worker</li>\n<li>Memory Cache</li>\n<li>Disk Cache</li>\n<li>(网络请求)</li>\n</ol>\n"},{question:"如何区分强制缓存和协商缓存",question_body:"",answer:"<ul>\n<li>200(from cache)：强制缓存</li>\n<li>304(Not Modified)：协商缓存</li>\n</ul>\n"},{question:"Cache from Memory 和 Cache from Disk 的区别",question_body:"",answer:"<p>Cache from Memory 是浏览器自身的优化行为，它不受 HTTP 协议头控制（no-store是例外）；\nCache from Disk 才是我们平时提到的 HTTP Cache；</p>\n"},{question:"Cache-Control 的配置决策",question_body:"",answer:'<p>\n  <img width="400" src="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/images/http-cache-decision-tree.png" alt="http-cache-decision-tree">\n</p>\n\n'},{question:"说下缓存相关的 headers，以及他们的作用",question_body:"",answer:"<ul>\n<li><p><strong>Cache-Control</strong> (HTTP/1.1)</p>\n<p>定义缓存策略，比如何时可以缓存/可以缓存多久</p>\n<p><strong>可缓存性：</strong></p>\n<ul>\n<li>no-cache: 每次需要先和服务器通信，确认资源未发生变化（如果存在ETag），才允许使用之前的缓存</li>\n<li>no-store: 不允许缓存响应，每次请求都必须完整获取</li>\n<li>public: 可以被浏览器或中间存储缓存（即使存在 HTTP 身份验证）</li>\n<li>private: 可以被浏览器缓存，但不能被中间存储缓存（比如 CDN）</li>\n</ul>\n<p><strong>过期时间：</strong></p>\n<ul>\n<li>max-age: 单位秒，比如 <code>max-age: 120</code> 表示可缓存120s</li>\n</ul>\n</li>\n<li><p><strong>ETag</strong></p>\n<p>资源更新检查</p>\n<p>第一次浏览器会拿到 ETag，如果缓存过期，会在 <code>If-None-Match</code> 的 header 带上 ETag 的值，和服务器确认资源是否发生变化，如果未发生变化，服务器会响应 <code>304 Not Modified</code>，可以再延用 max-age 时间的缓存</p>\n<p>我们要做的是确保服务端返回 ETag header，后续的事情浏览器会替我们完成</p>\n</li>\n</ul>\n"},{question:"如何让客户端更新被缓存的资源？",question_body:"",answer:"<p>如果资源被客户端缓存，在缓存失效前，在不更改资源网址的情况下，是没办法做到的，所以我们在资源内容发生变化时(利用content-hash)，需要更改它的网址，强制用户重新下载</p>\n"},{question:"HTTP Cache 实践举例",question_body:"",answer:"<ul>\n<li>html - Cache-Control: no-cache</li>\n<li>js/css - Cache-Control: max-age=31536000</li>\n<li>image - Cache-Control: max-age=86400</li>\n</ul>\n"},{question:"不设置 Cache-Control / Expires 会发生什么？",question_body:"",answer:'<blockquote>\n<p>Unless specifically constrained by a cache-control directive, a caching system MAY always store a successful response</p>\n</blockquote>\n<p>如果响应没有设置 Cache-Control，缓存系统 <strong>可以</strong> 对一个成功的响应进行存储</p>\n<p>所以根据规范，浏览器可能会缓存，也可能不会</p>\n<blockquote>\n<p>参考资料：</p>\n<ol>\n<li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html">Caching in HTTP</a></li>\n<li><a href="https://www.v2ex.com/t/356353">吐槽 chrome 的 200 from memory cache 缓存</a></li>\n<li><a href="https://webmasters.stackexchange.com/questions/111298/what-happens-if-you-dont-set-cache-control-header">What happens if you don&#39;t set cache-control header?</a></li>\n</ol>\n</blockquote>\n'},{question:"Cache-Control max-age=0 和 no-cache 的关系",question_body:"",answer:"<p>no-cache 等价于 max-age=0, must-revalidate</p>\n<p>no-cache 并不意味着不缓存，而是在使用缓存之前一定要进行验证。</p>\n\x3c!--\n参考：\nhttps://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching\nhttps://github.com/easonyq/easonyq.github.io/blob/master/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/others/cache.md\nhttps://tools.ietf.org/html/rfc7234#section-5.2.1\nhttps://jakearchibald.com/2016/caching-best-practices/?utm_campaign=chrome_series_catchingbestpractices_072717&utm_source=chromedev&utm_medium=yt-desc\n\n--\x3e\n"}]},{name:"性能优化",file:"junior/performance.md",id:"a633cff6",questions:[{question:"可以从哪些方面进行前端页面性能优化",question_body:"",answer:'<ol>\n<li>✂️ Send less JavaScript (code-splitting)</li>\n<li>😴 Lazy-load non-critical resources</li>\n<li>🗜 Compress diligently! (GZip, Brotli)</li>\n<li>📦 Cache effectively (HTTP, Service Workers)</li>\n<li>⚡️ Minify &amp; optimize everything</li>\n<li>🗼 Preresolve DNS for critical origins</li>\n<li>💨 Preload critical resources</li>\n<li>📲 Respect data plans</li>\n<li>🌊 Stream HTML responses</li>\n<li>📡 Make fewer HTTP requests</li>\n<li>📰 Have a Web Font loading strategy</li>\n<li>🛣 Route-based chunking</li>\n<li>📒 Library sharding</li>\n<li>📱 PRPL pattern</li>\n<li>🌴 Tree-shaking (Webpack, RollUp)</li>\n<li>🍽 Serve modern browsers ES2015 (babel-preset-env)</li>\n<li>🏋️‍ Scope hoisting (Webpack)</li>\n<li>🔧 Don’t ship DEV code to PROD</li>\n</ol>\n<blockquote>\n<p><a href="https://dev.to/addyosmani/im-addy-osmani-ask-me-anything-596c">Addy Osmani AMA</a></p>\n</blockquote>\n<blockquote>\n<p><a href="https://github.com/thedaviddias/Front-End-Performance-Checklist">Front-End Performance Checklist</a></p>\n</blockquote>\n'}]},{name:"同源策略",file:"junior/same-origin-policy.md",id:"d85d02fa",questions:[{question:"如何判断同源？",question_body:"",answer:"<p>协议、域名、端口都相同</p>\n"},{question:"常见的跨域方案",question_body:"",answer:'<ul>\n<li><p>窗口通信</p>\n<ul>\n<li><p>document.domain</p>\n<p style="font-size: 13px;">适用于二级域名相同，三级域名不同的场景，比如 <strong>a.example.com</strong> 和 <strong>b.example.com</strong></p></li>\n<li><p>hash + hashchange</p>\n</li>\n<li><p>window.name</p>\n</li>\n<li><p>postMessage</p>\n</li>\n</ul>\n</li>\n<li><p>异步请求</p>\n<ul>\n<li>JSONP</li>\n<li>WebSocket</li>\n<li>CORS</li>\n</ul>\n</li>\n</ul>\n'},{question:"JSONP 有什么限制？",question_body:"",answer:"<p>只能发送 GET 请求</p>\n"},{question:"为什么 WebSocket 没有同源策略的限制",question_body:"",answer:"<p>浏览器发送了 <code>Origin</code> 请求头，服务端可以对此进行校验</p>\n"},{question:"描述下预检请求（Preflight request）",question_body:"",answer:""},{question:"form 表单可以跨域吗？",question_body:"",answer:"<p>可以，因为表单提交后会刷新页面，原页面的js拿不到响应内容</p>\n"}]},{name:"事件循环",file:"junior/event-loop.md",id:"34a702fe",questions:[{question:"描述下事件循环机制",question_body:"",answer:""}]},{name:"手写代码",file:"junior/hand-writing.md",id:"c1a3f3d2",questions:[{question:"展平数组",question_body:"",answer:'<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span> <span class="token parameter">array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token parameter">memo<span class="token punctuation">,</span> current<span class="token punctuation">,</span> index</span> <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> memo<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>\n      Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span> current <span class="token punctuation">)</span> <span class="token operator">?</span>\n        <span class="token function">flatten</span><span class="token punctuation">(</span> current <span class="token punctuation">)</span> <span class="token operator">:</span>\n        current\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 利用 concat 能够展开数组</span>\n<span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span> <span class="token parameter">array</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span> array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span> <span class="token parameter">item</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span> item <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span> <span class="token operator">...</span>array <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> array\n<span class="token punctuation">}</span></code></pre>\n'},{question:"深拷贝",question_body:"",answer:""},{question:"柯里化",question_body:"",answer:'<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span> <span class="token parameter">fn</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">judge</span><span class="token punctuation">(</span> <span class="token parameter"><span class="token operator">...</span>args</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> fn<span class="token punctuation">.</span>length <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token parameter">arg</span> <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">judge</span><span class="token punctuation">(</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> arg <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span> <span class="token operator">...</span>args <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<p>用法</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span> <span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> curryAdd <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span> add <span class="token punctuation">)</span>\n\n<span class="token function">curryAdd</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token comment">// -> 6</span></code></pre>\n<p>注：柯里化的定义是每次调用新增一个参数，所以上面的实现是按一个参数来的</p>\n'},{question:"LRU Cache",question_body:"",answer:'<p>LRU 的主要目的是为了限制内存，以下的 LRU 算法不会严格查找最近最少使用的k/v，会在 get 时尝试更新从 oldCache 中把 k/v 捞回，然后在 cache 满了的时候，直接 GC 整个 oldCache，这个算法最多会存储 2N keys/value，内存上不会有什么问题</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span> <span class="token parameter">maxSize</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>maxSize <span class="token operator">||</span> <span class="token punctuation">(</span> maxSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span> <span class="token string">\'Expect maxSize > 0\'</span> <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize <span class="token operator">||</span> <span class="token number">Infinity</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>oldCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">has</span><span class="token punctuation">(</span> <span class="token parameter">key</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span> <span class="token operator">||</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>oldCache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">remove</span><span class="token punctuation">(</span> <span class="token parameter">key</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span> <span class="token operator">||</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>oldCache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>oldCache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">set</span><span class="token punctuation">(</span> key<span class="token punctuation">,</span> value <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> key<span class="token punctuation">,</span> value <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_set</span><span class="token punctuation">(</span> key<span class="token punctuation">,</span> value <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">get</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oldCache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 将值从 oldCache 向 cache 转移，在下次 cache 满了的时候， oldCache 会被自动 GC</span>\n      <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oldCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_set</span><span class="token punctuation">(</span> key<span class="token punctuation">,</span> value <span class="token punctuation">)</span>\n      <span class="token keyword">return</span> value\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">_set</span><span class="token punctuation">(</span> <span class="token parameter">key<span class="token punctuation">,</span> value</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> key<span class="token punctuation">,</span> value <span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span>size <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>oldCache <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache\n      <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<blockquote>\n<p>参考：<a href="https://github.com/dominictarr/hashlru">hashlru</a></p>\n</blockquote>\n'},{question:"金额处理，整数部分从后往前，每三位添加一个 “,” 进行分隔",question_body:"",answer:'<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">formatMoney</span><span class="token punctuation">(</span> <span class="token parameter">string</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">~</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span> <span class="token string">\'.\'</span> <span class="token punctuation">)</span> <span class="token operator">?</span>\n    string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)(?=(\\d{3})+\\.)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">\'$1,\'</span> <span class="token punctuation">)</span> <span class="token operator">:</span>\n    string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">\'$1,\'</span> <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">formatMoney</span><span class="token punctuation">(</span> <span class="token string">\'1234567890.89\'</span> <span class="token punctuation">)</span> <span class="token comment">// -> 1,234,567,890.89</span></code></pre>\n'},{question:"Promise.retry( fn, retryTimes )",question_body:"",answer:'<pre class="language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function-variable function">retry</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">fn<span class="token punctuation">,</span> retryTimes <span class="token operator">=</span> <span class="token number">1</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">job</span><span class="token punctuation">(</span> <span class="token parameter">resolve<span class="token punctuation">,</span> reject</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> resolve <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span> retryTimes <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        retryTimes<span class="token operator">--</span>\n        <span class="token function">job</span><span class="token punctuation">(</span> resolve<span class="token punctuation">,</span> reject <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> resolve<span class="token punctuation">,</span> reject <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">job</span><span class="token punctuation">(</span> resolve<span class="token punctuation">,</span> reject <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n'}]}],id:"5435aa3e"},{name:"前端高级",icon:"crown",categories:[{name:"vue",file:"senior/vue.md",id:"7388a8f0",questions:[{question:"为什么vue中推荐@click的写法，之前不是一直不推荐么？",question_body:"",answer:"<p>全局，维护性问题</p>\n"}]},{name:"webpack",file:"senior/webpack.md",id:"ad63f07e",questions:[{question:"常见的 plugins 有哪些？",question_body:"",answer:""},{question:"file-loader / url-loader 如何选择？",question_body:"",answer:""}]},{name:"综合",file:"senior/other.md",id:"2217937e",questions:[{question:"怎么看前后端分离？",question_body:"",answer:"<p>准确地说应该是前后端分层，前后端分层的目的是前后端工作的分层协同</p>\n"}]}],id:"543dc987"},{name:"NodeJS",icon:"nodejs",id:"49f46661"},{name:"学习能力",icon:"experiment",id:"57b5eb6e"},{name:"思维方式",icon:"bulb",id:"5a8db223"},{name:"问题解决",icon:"thunderbolt",id:"7368f310"},{name:"沟通能力",icon:"smile",id:"6080decf"}];const j={components:{Category:S},data:()=>({pages:C}),methods:{}},P=o();n("data-v-1fd88356");const x={class:"categories"};s();const E=P(((n,s,o,c,l,r)=>{const k=p("Category");return a(),t("div",x,[e("div",null,[(a(!0),t(u,null,i(l.pages,((n,s)=>(a(),t(k,{page:n},null,8,["page"])))),256))])])}));j.render=E,j.__scopeId="data-v-1fd88356";const N={components:{},data(){const n=this.$route.params.pid,s=this.$route.params.cid,a=C.find((s=>s.id===n)).categories.find((n=>n.id===s)),t=a.questions||[];return{title:a.name,questions:t||[]}},methods:{onHome(){this.$router.push({name:"categories"})}}},H=o();n("data-v-5e96d0d9");const L={class:"questions"},A={class:"questions__head"},I=e("i",{class:"iconfont icon-back"},null,-1),M={class:"questions__title"},R={class:"questions__body"},D={class:"question"},B={class:"question__head"},O={class:"question__question"},z=e("div",null,null,-1);s();const F=H(((n,s,o,p,c,r)=>(a(),t("div",L,[e("div",A,[e("div",{class:"questions__back",onClick:s[1]||(s[1]=(...n)=>r.onHome&&r.onHome(...n))},[I]),e("div",M,l(c.title),1)]),e("div",R,[(a(!0),t(u,null,i(c.questions,((n,s)=>(a(),t("div",D,[e("div",{class:"question__fullscreenroot",ref:"fullscreen_"+s},[e("div",B,[e("h1",O,l(n.question),1),z]),e("div",{class:"question__body",innerHTML:n.question_body},null,8,["innerHTML"])],512),e("div",{class:"question__answer",innerHTML:n.answer},null,8,["innerHTML"])])))),256))])]))));N.render=F,N.__scopeId="data-v-5e96d0d9";const U=k({expose:[],setup:n=>(n,s)=>{const e=p("router-view");return a(),t(e)}}),J=[{name:"home",path:"/",component:g},{name:"categories",path:"/categories",component:j},{path:"/questions/:pid/:cid",component:N}],W=d({history:m(),routes:J});U.use(W),U.mount("#app");
